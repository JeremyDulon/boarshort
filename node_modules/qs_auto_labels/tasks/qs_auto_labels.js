module.exports = function(grunt) {

    var path = require('path'),
        exec = require('child_process').exec,
        jsons = [],
        tpls = [],
        labels= [];

    // Initialize repo for build
    grunt.registerMultiTask('auto_labels', function() {
        var options = this.options({ locales: [], base : ''  });
        if(jsons.length==0)
        {
            jsons = grunt.file.expand(options.locales);
        }
        if(tpls.length==0)
        {
            tpls = grunt.file.expand(options.base+"/**/*.html")
        }

        grunt.log.writeln('Auto generating label from '+options.config);
        var config_data = grunt.file.readJSON(options.config);

        // Read templates from tpl files
        tpls.forEach(function(file)
        {
            var
                re= /<%=([\s\w\.]*?)%>/g,
                result,
                tpl_data = grunt.file.read(file);
            while(result = re.exec(tpl_data))
            {
                var l =result[1].trim();
                if(labels.indexOf(l)==-1)
                {
                    labels.push(l);
                }
            }
        });

        // Read jsons file to check for each label
        jsons.forEach(function(file)
        {
            var
                json_data = grunt.file.readJSON(file),
                modified=false;
            labels.forEach(function(l)
            {
                var orig = l+'';
                var nested = l.split('.');

                // Locale (par langue )
                if(nested[0] == "grunt_locale" )
                {
                }
                else if(nested[0] == "config" )
                {
                    var current=config_data;
                    for(var i=1; i<nested.length-1; i++)
                    {
                        var subitem = {};
                        if(!current[nested[i]]) { 
                            current[nested[i]] = subitem;
                        }
                        current  = current[nested[i]];
                    }
                    l=nested[nested.length-1];
                    if(current[l]===undefined)
                    {
                        modified=true;
                        grunt.log.writeln('Creating new CONFIG "'+l);
                        current[l]='#'+l.toUpperCase()+'#';
                    }
                }
                else
                {
                    var current=json_data.data;
                    for(var i=0; i<nested.length-1; i++)
                    {
                        var subitem = {};
                        if(!current[nested[i]]) { 
                            current[nested[i]] = subitem;
                        }
                        current  = current[nested[i]];
                    }
                    l=nested[nested.length-1];
                    if(current[l]===undefined)
                    {
                        modified=true;
                        grunt.log.writeln('Creating new label "'+l+'" in '+file);
                        current[l]='#'+orig.toUpperCase()+'#';
                    }
                }
            });
            if(modified)
            {
                grunt.log.writeln('Updating file '+file);
                grunt.file.write(file, JSON.stringify(json_data, ' ', "\t"));
                grunt.file.write(options.config, JSON.stringify(config_data, ' ', "\t"));
            }
        });
    });
};

