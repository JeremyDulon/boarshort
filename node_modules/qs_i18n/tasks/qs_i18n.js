module.exports = function(grunt) {
  var generateOutputPath, translateTemplates;
  grunt.registerMultiTask('i18n', 'Localize Grunt templates', function() {
    var config, options;
    options = this.options({
      locales: [],
      output: '.',
      base: ''
    });
    grunt.verbose.writeflags(options, 'Options');
    config = grunt.file.readJSON(options.config);
    return this.filesSrc.forEach(function(filepath) {
      var localepath, locales, _i, _len, _results;
      locales = grunt.file.expand(options.locales);
      _results = [];
      for (_i = 0, _len = locales.length; _i < _len; _i++) {
        localepath = locales[_i];
        _results.push(translateTemplates(filepath, localepath, options, config));
      }
      return _results;
    });
  });
  translateTemplates = function(filepath, localpath, options, config) {
    var fileContent, localContent, localizedTemplate, outputpath;
    var path = require('path');
    fileContent = grunt.file.read(filepath);
    localContent = grunt.file.readJSON(localpath);
    localContent.data.config = config;
    localContent.data.grunt_locale = path.basename(localpath).replace(/\.[^\.]+$/,'');
    localizedTemplate = grunt.template.process(fileContent, {
      data: localContent.data
    });
    outputpath = generateOutputPath(localContent.options.outputFolder, filepath, options);
    grunt.log.writeln('generating file ' + outputpath);
    return grunt.file.write(outputpath, localizedTemplate);
  };
  return generateOutputPath = function(localeFolder, filepath, options) {
    if (grunt.util._.startsWith(filepath, options.base)) {
      filepath = filepath.slice(options.base.length);
    }
    filepath = grunt.util._.trim(filepath, '/');
    return [options.output, localeFolder, filepath].join('/');
  };
};

