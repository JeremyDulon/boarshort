module.exports = function(grunt) {
    var path = require('path');


    // Creat csv field with protected quotes
    function csvField(data)
    {
        return '"'+data.replace(/"/g,'""')+'"';
    }

    // Encode obj to csv with protected field quotes
    var json_to_properties = function(obj, prefix)
    {
        var txt = '';
        for( var i in obj)
        {
            if(typeof obj[i] == "string")
            {
                txt+=csvField(prefix+'['+JSON.stringify(i)+'] = ')+';'+csvField(obj[i])+'\n';
            }
            else
            {
                txt+= '\n'+json_to_properties(obj[i], prefix+'['+JSON.stringify(i)+']').trim()+'\n';
            }
        }
        return txt;
    }

    var path = require('path'),
        exec = require('child_process').exec,
        jsons = [],
        tpls = [],
        labels= [];


    // Initialize repo for build
    grunt.registerMultiTask('import_labels', function() {
        var options = this.options({ locales: [], output :'' });
        if(jsons.length==0)
        {
            jsons = grunt.file.expand(path.normalize(options.locales));
        }

        // Read jsons file to check for each label
        jsons.forEach(function(file)
        {
            grunt.log.writeln('Import '+file);
            var src = grunt.file.expand(options.output);
            var filename = path.basename(file).replace('.json', '.csv');
            var json_data = grunt.file.readJSON(file);
            var csv_data = grunt.file.read(src+'/'+filename);

            var S = require('string');
            var data = S(csv_data).parseCSV(';','"', '"', "\n" )
            for(var i=0; i<data.length; i++)
            {
                if(data[i][0].length>0)
                {
                    // Try to auto create node
                    var nodes = data[i][0].split(/["\]\[]+/);
                    var ref = ["data"];
                    for(var j=2; j<nodes.length-2;j++)
                    {
                        if(nodes[1]=="data")
                        {
                            ref.push(nodes[j]);
                            //grunt.log.writeln('test node '+nodes[j]);
                            //grunt.log.writeln('CHECK: json_data["'+ref.join('"]["')+'"]');
                            if(eval('json_data["'+ref.join('"]["')+'"] === undefined'))
                            {
                                grunt.log.writeln('Creating node '+ref.join(','));
                                eval('json_data["'+ref.join('"]["')+'"] = {}');
                            }
                        }
                    }

                    try
                    {
                        eval('json_data'+data[i][0]+' '+JSON.stringify(data[i][1]));
                    }
                    catch(err)
                    {
                            grunt.log.writeln('ERROR CSV: json_data'+data[i][0]+' '+JSON.stringify(data[i][1]));
                        exit;
                    }
                }
            }
            grunt.file.write(file, JSON.stringify(json_data, ' ', "\t"));
        });
        grunt.task.run('i18n');
    });
};

